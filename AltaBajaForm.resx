<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="errorProviderA.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>